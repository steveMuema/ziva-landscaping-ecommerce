generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String
  description String?  
  imageUrl      String?
  subCategories SubCategory[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model SubCategory {
  id         Int       @id @default(autoincrement())
  name       String
  description String?
  categoryId Int
  imageUrl   String?
  category   Category  @relation(fields: [categoryId], references: [id])
  products   Product[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Product {
  id            Int         @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  imageUrl      String?
  stock         Int
  subCategoryId Int
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  carts         Cart[]
  wishlists     Wishlist[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  OrderItem     OrderItem[]
}

model Cart {
  id        Int      @id @default(autoincrement())
  clientId  String
  productId Int
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  clientId  String
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

model Collection {
  id          Int    @id @default(autoincrement())
  image       String
  category    String
  alt         String
  description String
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Order {
  id         Int         @id @default(autoincrement())
  clientId   String
  email      String
  fullname   String
  phone      String
  company    String?
  country    String
  state      String
  address    String
  apartment  String?
  city       String
  postalCode String
  subtotal   Float
  status     String      @default("pending") // e.g., "pending", "processing", "completed", "cancelled"
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float // Price at the time of order
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}
